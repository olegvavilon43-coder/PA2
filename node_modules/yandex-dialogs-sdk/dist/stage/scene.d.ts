import { CommandCallback, CommandDeclaration, CommandCallbackResult } from '../command/command';
import { IStageContext } from './stageContext';
export interface IScene<TContext extends IStageContext = IStageContext> {
    readonly name: string;
    command(declaration: CommandDeclaration<TContext>, callback: CommandCallback<TContext>): void;
    any(callback: CommandCallback<TContext>): void;
    run(context: TContext): Promise<CommandCallbackResult | null>;
}
export declare class Scene<TContext extends IStageContext = IStageContext> implements IScene<TContext> {
    readonly name: string;
    private readonly _commands;
    private _anyCommand;
    constructor(name: string);
    command(declaration: CommandDeclaration<TContext>, callback: CommandCallback<TContext>): void;
    any(callback: CommandCallback<TContext>): void;
    run(context: TContext): Promise<CommandCallbackResult | null>;
}
