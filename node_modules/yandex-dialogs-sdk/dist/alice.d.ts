import { IImagesApiConfig, IImagesApi } from './imagesApi';
import { WebhookServer, IWebhookServer } from './server/webhookServer';
import { Middleware } from './middleware/middleware';
import { IApiRequest } from './api/request';
import { IContext } from './context';
import { IApiResponse } from './api/response';
import { CommandCallback, CommandDeclaration } from './command/command';
import { ISessionStorage } from './session/session';
import { IScene } from './stage/scene';
export interface IAliceConfig extends IImagesApiConfig {
    sessionStorage?: ISessionStorage;
}
export interface IAlice {
    readonly imagesApi: IImagesApi;
    handleRequest(data: IApiRequest): Promise<IApiResponse>;
    use(middleware: Middleware): void;
    listen(port: number, webhookUrl: string, options: object): IWebhookServer;
}
export declare class Alice implements IAlice {
    private readonly _config;
    private readonly _middlewares;
    private readonly _imagesApi;
    private readonly _mainStage;
    private readonly _sessionStorage;
    private _eventEmitter;
    constructor(config?: IAliceConfig);
    private _buildContext;
    private _runMiddlewares;
    readonly imagesApi: IImagesApi;
    handleRequest(data: IApiRequest): Promise<IApiResponse>;
    listen(port?: number, webhookUrl?: string, options?: object): WebhookServer;
    use(middleware: Middleware): void;
    command(declaration: CommandDeclaration<IContext>, callback: CommandCallback<IContext>): void;
    any(callback: CommandCallback<IContext>): void;
    registerScene(scene: IScene): void;
    on(type: 'response' | 'request', callback: (context: IContext) => any): void;
}
