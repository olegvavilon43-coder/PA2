import { ICommand } from './command';
import { IContext } from '../context';
export interface ICommandRelevance<TContext extends IContext = IContext> {
    readonly command: ICommand<TContext>;
    readonly relevance: number;
}
export interface ICommandsGroup<TContext extends IContext = IContext> {
    add(command: ICommand): void;
    getRelevance(context: TContext): Promise<Array<ICommandRelevance<TContext>> | null>;
    getMostRelevant(context: TContext): Promise<ICommand<TContext> | null>;
}
export declare class CommandsGroup<TContext extends IContext = IContext> implements ICommandsGroup<TContext> {
    private readonly _commands;
    constructor();
    getRelevance(context: TContext): Promise<ICommandRelevance[] | null>;
    getMostRelevant(context: TContext): Promise<ICommand<TContext> | null>;
    add(command: ICommand<TContext>): void;
}
