"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = __importStar(require("http"));
const debug_1 = __importDefault(require("../debug"));
function isAvailableMethod(method) {
    if (method === undefined) {
        return false;
    }
    return ['POST', 'OPTIONS'].includes(method);
}
function formatWebhookUrl(webhookUrl) {
    if (webhookUrl === '') {
        return '/';
    }
    return webhookUrl;
}
class WebhookServer {
    constructor(config) {
        this._port = config.port;
        this._webhookUrl = formatWebhookUrl(config.webhookUrl);
        this._handleAliceRequest = config.handleRequest;
        this._isStarted = false;
        debug_1.default(`starting webhook server`);
        this._server = http.createServer((request, response) => this._handleRequest(request, response));
    }
    async _handleRequest(request, response) {
        if (!isAvailableMethod(request.method) ||
            request.url !== this._webhookUrl) {
            response.statusCode = 400;
            return response.end();
        }
        const requestBody = await WebhookServer._readRequest(request);
        const responseBody = await this._handleAliceRequest(requestBody);
        WebhookServer._sendResponse(response, responseBody);
    }
    static _readRequest(request) {
        return new Promise((resolve, reject) => {
            const body = [];
            request
                .on('data', chunk => {
                if (typeof chunk === 'string') {
                    body.push(Buffer.from(chunk));
                    return;
                }
                body.push(chunk);
            })
                .on('end', async () => {
                const requestData = Buffer.concat(body).toString();
                resolve(JSON.parse(requestData));
            })
                .on('error', reject);
        });
    }
    static async _sendResponse(response, responseBody) {
        response.statusCode = 200;
        response.setHeader('Content-Type', 'application/json');
        response.end(JSON.stringify(responseBody));
    }
    start() {
        if (this._isStarted) {
            throw new Error(`Server is already started`);
        }
        this._server.listen(this._port, () => {
            debug_1.default(`server is listening on ${this._port}, '${this._webhookUrl}'`);
            this._isStarted = true;
        });
    }
    stop() {
        if (!this._isStarted) {
            return;
        }
        debug_1.default(`stopping webhook server`);
        this._server.close();
        this._isStarted = false;
    }
}
exports.WebhookServer = WebhookServer;
